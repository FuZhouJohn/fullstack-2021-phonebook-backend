{"version":3,"sources":["server/persons.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","personObject","post","deleteById","id","delete","update","put","Filter","text","setText","value","onChange","event","target","PersonForm","persons","setPersons","showNotification","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","existedPerson","find","person","name","window","confirm","number","returnedPerson","map","catch","filter","concat","type","Persons","filterText","onDelete","filteredPersons","toLowerCase","indexOf","onClick","Notification","className","message","App","notification","setNotification","useEffect","initialPersons","setFilterText","timeOut","clearTimeout","setTimeout","Person","p","ReactDOM","render","document","getElementById"],"mappings":"+KAEMA,EAAU,eA2BDC,EAPO,CACpBC,OAnBa,WACb,OAAOC,IAAMC,IAAIJ,GAASK,MAAK,SAACC,GAAD,OAAcA,EAASC,SAmBtDC,OAhBa,SAACC,GACd,OAAON,IAAMO,KAAKV,EAASS,GAAcJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAgBrEI,WAbiB,SAACC,GAClB,OAAOT,IAAMU,OAAN,UAAgBb,EAAhB,YAA2BY,IAAMP,MAAK,SAACC,GAAD,OAAcA,EAASC,SAapEO,OAVa,SAACF,EAAIH,GAClB,OAAON,IACJY,IADI,UACGf,EADH,YACcY,GAAMH,GACxBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,U,cCRlBS,EAXA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAItB,OACE,mDACoB,uBAAOC,MAAOF,EAAMG,SALjB,SAACC,GACxBH,EAAQG,EAAMC,OAAOH,c,OCyEVI,EAxEI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,iBACzC,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAuDA,OACE,uBAAMC,SA/CU,SAACX,GACjBA,EAAMY,iBACN,IAAMC,EAAgBV,EAAQW,MAAK,SAACC,GAAD,OAAYA,EAAOC,OAAST,KAE/D,GACEM,GACAI,OAAOC,QAAP,UACKL,EAAcG,KADnB,2EAIApC,EACGa,OAAOoB,EAActB,GADxB,2BAEOsB,GAFP,IAGIM,OAAQV,KAETzB,MAAK,SAACoC,GACLf,EAAiB,UAAD,kBAAuBe,EAAeJ,OACtDZ,EACED,EAAQkB,KAAI,SAACN,GAAD,OACVA,EAAOxB,KAAO6B,EAAe7B,GAAKwB,EAASK,MAG/CZ,EAAW,IACXE,EAAa,OAEdY,OAAM,WACLjB,EACE,QADc,yBAEIQ,EAAcG,KAFlB,0CAIhBZ,EACED,EAAQoB,QAAO,SAACR,GAAD,OAAYA,EAAOxB,KAAOsB,EAActB,cA3B/D,CAiCA,IAAMH,EAAe,CAAE4B,KAAMT,EAASY,OAAQV,GAC9C7B,EAAcO,OAAOC,GAAcJ,MAAK,SAACoC,GACvCf,EAAiB,UAAD,gBAAqBe,EAAeJ,OACpDZ,EAAWD,EAAQqB,OAAOJ,IAC1BZ,EAAW,IACXE,EAAa,SAKf,UACE,yCACQ,uBAAOZ,MAAOS,EAASR,SAxDV,SAACC,GACxBQ,EAAWR,EAAMC,OAAOH,aAyDtB,2CACU,uBAAOA,MAAOW,EAAWV,SAxDZ,SAACC,GAC1BU,EAAaV,EAAMC,OAAOH,aAyDxB,8BACE,wBAAQ2B,KAAK,SAAb,uBCpDOC,EAjBC,SAAC,GAAuC,IAArCvB,EAAoC,EAApCA,QAASwB,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAChCC,EAAkB1B,EAAQoB,QAC9B,SAACR,GAAD,OAAYA,EAAOC,KAAKc,cAAcC,QAAQJ,EAAWG,gBAAkB,KAG7E,OACE,8BACGD,EAAgBR,KAAI,SAACN,GAAD,OACnB,8BACGA,EAAOC,KADV,IACiBD,EAAOI,OAAQ,IAC9B,wBAAQa,QAAS,kBAAMJ,EAASb,IAAhC,sBAFMA,EAAOC,YCARiB,EARM,SAAC,GAAc,IAAZ/C,EAAW,EAAXA,KACtB,OAAa,OAATA,EACK,KAGF,qBAAKgD,UAAWhD,EAAKuC,KAArB,SAA4BvC,EAAKiD,WCqD3BC,EAnDH,WACR,MAA8B9B,mBAAS,IAAvC,mBAAOH,EAAP,KAAgBC,EAAhB,KAGA,EAAwCE,mBAAS,MAAjD,mBAAO+B,EAAP,KAAqBC,EAArB,KAGAC,qBAAU,WACN3D,EAAcC,SAASG,MAAK,SAACwD,GACzBpC,EAAWoC,QAEhB,IAEH,MAAoClC,mBAAS,IAA7C,mBAAOqB,EAAP,KAAmBc,EAAnB,KAQIC,EAAU,KASd,OACI,gCACI,2CACA,cAAC,EAAD,CAAcxD,KAAMmD,IACpB,cAAC,EAAD,CAAQzC,KAAM+B,EAAY9B,QAAS4C,IACnC,2CACA,cAAC,EAAD,CACItC,QAASA,EACTC,WAAYA,EACZC,iBAjBa,SAACoB,EAAMU,GACxBO,GAASC,aAAaD,GAC1BJ,EAAgB,CAACH,UAASV,SAC1BiB,EAAUE,YAAW,WACjBN,EAAgB,QACjB,QAcC,yCACA,cAACO,EAAD,CACIlB,WAAYA,EACZxB,QAASA,EACTyB,SA/BS,SAACb,GACdE,OAAOC,QAAP,iBAAyBH,EAAOC,KAAhC,QACApC,EAAcU,WAAWyB,EAAOxB,IAAIP,MAAK,WACrCoB,EAAWD,EAAQoB,QAAO,SAACuB,GAAD,OAAOA,EAAEvD,KAAOwB,EAAOxB,iB,MCpBjEwD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.92fc8a47.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then((response) => response.data);\r\n};\r\n\r\nconst create = (personObject) => {\r\n  return axios.post(baseUrl, personObject).then((response) => response.data);\r\n};\r\n\r\nconst deleteById = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`).then((response) => response.data);\r\n};\r\n\r\nconst update = (id, personObject) => {\r\n  return axios\r\n    .put(`${baseUrl}/${id}`, personObject)\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst personService = {\r\n  getAll,\r\n  create,\r\n  deleteById,\r\n  update,\r\n};\r\n\r\nexport default personService;\r\n","const Filter = ({ text, setText }) => {\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  return (\r\n    <p>\r\n      filter shown with <input value={text} onChange={handleTextChange} />\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useState } from \"react\";\r\nimport personService from \"../server/persons\";\r\n\r\nconst PersonForm = ({ persons, setPersons, showNotification }) => {\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n    const existedPerson = persons.find((person) => person.name === newName);\r\n\r\n    if (\r\n      existedPerson &&\r\n      window.confirm(\r\n        `${existedPerson.name} is already added to phonebook, replace the old number with a new one?`\r\n      )\r\n    ) {\r\n      personService\r\n        .update(existedPerson.id, {\r\n          ...existedPerson,\r\n          number: newNumber,\r\n        })\r\n        .then((returnedPerson) => {\r\n          showNotification(\"success\", `Updated ${returnedPerson.name}`);\r\n          setPersons(\r\n            persons.map((person) =>\r\n              person.id !== returnedPerson.id ? person : returnedPerson\r\n            )\r\n          );\r\n          setNewName(\"\");\r\n          setNewNumber(\"\");\r\n        })\r\n        .catch(() => {\r\n          showNotification(\r\n            \"error\",\r\n            `Information of ${existedPerson.name} has already been removed from server`\r\n          );\r\n          setPersons(\r\n            persons.filter((person) => person.id !== existedPerson.id)\r\n          );\r\n        });\r\n      return;\r\n    }\r\n\r\n    const personObject = { name: newName, number: newNumber };\r\n    personService.create(personObject).then((returnedPerson) => {\r\n      showNotification(\"success\", `Added ${returnedPerson.name}`);\r\n      setPersons(persons.concat(returnedPerson));\r\n      setNewName(\"\");\r\n      setNewNumber(\"\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        name: <input value={newName} onChange={handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={newNumber} onChange={handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","const Persons = ({ persons, filterText, onDelete }) => {\r\n  const filteredPersons = persons.filter(\r\n    (person) => person.name.toLowerCase().indexOf(filterText.toLowerCase()) >= 0\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {filteredPersons.map((person) => (\r\n        <p key={person.name}>\r\n          {person.name} {person.number}{\" \"}\r\n          <button onClick={() => onDelete(person)}>delete</button>\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","const Notification = ({ data }) => {\r\n  if (data === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={data.type}>{data.message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import personService from \"./server/persons\";\nimport { useEffect, useState } from \"react\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Person\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    // const [notice, setNotice] = useState(null);\n    // const [noticeType, setNoticeType] = useState(\"success\");\n    const [notification, setNotification] = useState(null)\n\n\n    useEffect(() => {\n        personService.getAll().then((initialPersons) => {\n            setPersons(initialPersons);\n        });\n    }, []);\n\n    const [filterText, setFilterText] = useState(\"\");\n    const handleDelete = (person) => {\n        if (window.confirm(`Delete ${person.name} ?`)) {\n            personService.deleteById(person.id).then(() => {\n                setPersons(persons.filter((p) => p.id !== person.id));\n            });\n        }\n    };\n    let timeOut = null;\n    const showNotification = (type, message) => {\n        if (timeOut) clearTimeout(timeOut);\n        setNotification({message, type})\n        timeOut = setTimeout(() => {\n            setNotification(null);\n        }, 5000);\n    };\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification data={notification}/>\n            <Filter text={filterText} setText={setFilterText}/>\n            <h3>add a new</h3>\n            <PersonForm\n                persons={persons}\n                setPersons={setPersons}\n                showNotification={showNotification}\n            />\n            <h3>Numbers</h3>\n            <Persons\n                filterText={filterText}\n                persons={persons}\n                onDelete={handleDelete}\n            />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}